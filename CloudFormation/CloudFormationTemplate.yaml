AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation Assignment3

Parameters:
  apiGatewayName:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9_.\\-]+$"
  apiGatewayDescription:
    Type: "String"
    AllowedPattern: "^[a-zA-Z0-9_.\\- ]+$"
    Default: "A REST API"
  apiGatewayStageName:
    Type: "String"
    AllowedPattern: "^[a-z0-9]+$"
    Default: "dev"

Resources:
  # S3 Bucket
  S3Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: cloudformation-ass3-aravind
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: error.html
  
  # Lambda Function
  LF1demo:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: search-lamda-ass-s3
        S3Key: search-photos-lamda.zip
      FunctionName: Search-Photo-Cloudformation
      Handler: Search-Photo-Cloudformation/search-photos-lamda.lambda_handler
      Runtime: python3.11
      Description: Lambda function 2 for CF Demo
      MemorySize: 128
      Timeout: 30
      Role: arn:aws:iam::831379192233:role/service-role/index-photos-role-pc28xq57
      Environment:
        Variables:
          REGION: us-east-1
  
  # API Gateway
  apiGateway:
    Type: "AWS::ApiGateway::RestApi"
    Properties:
      Name: !Ref apiGatewayName
      Description: !Ref apiGatewayDescription
      
  apiGatewayResource:
    Type: "AWS::ApiGateway::Resource"
    Properties:
      ParentId: !GetAtt "apiGateway.RootResourceId"
      PathPart: 'search-photos'
      RestApiId: !Ref "apiGateway"

  apiGatewayRootMethod:
    Type: "AWS::ApiGateway::Method"
    Properties:
      ApiKeyRequired: false
      AuthorizationType: "NONE"
      HttpMethod: "GET"
      Integration:
        RequestTemplates:
          application/json: |
            {"statusCode": 200}
        IntegrationResponses:
          - ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: "'*'"
            ResponseTemplates:
              application/json: "{\"message\": \"OK\"}"
            StatusCode: 200
        Type: "MOCK"
        TimeoutInMillis: 29000
      MethodResponses:
        - ResponseModels:
            application/json: !Ref "apiGatewayModel"
          ResponseParameters:
              method.response.header.Access-Control-Allow-Origin: true
          StatusCode: 200
      ResourceId: !Ref "apiGatewayResource"
      RestApiId: !Ref "apiGateway"

  apiGatewayModel:
    Type: "AWS::ApiGateway::Model"
    Properties:
      ContentType: 'application/json'
      RestApiId: !Ref "apiGateway"
      Schema: {}

  apiGatewayDeployment:
    Type: "AWS::ApiGateway::Deployment"
    DependsOn: "apiGatewayRootMethod"
    Properties:
      RestApiId: !Ref "apiGateway"

  apiGatewayStage:
    Type: "AWS::ApiGateway::Stage"
    Properties:
      StageName: !Ref "apiGatewayStageName"
      RestApiId: !Ref "apiGateway"
      DeploymentId: !Ref "apiGatewayDeployment"
      MethodSettings:
        - ResourcePath: /search-photos
          HttpMethod: "GET"
          MetricsEnabled: "true"
          DataTraceEnabled: "true"
          LoggingLevel: "INFO"
      AccessLogSetting:
        DestinationArn: !GetAtt "apiCloudWatch.Arn"
        Format: "{\"requestId\": \"$context.requestId\", \"ip\": \"$context.identity.sourceIp\", \"caller\": \"$context.identity.caller\", \"requestTime\": \"$context.requestTimeEpoch\", \"httpMethod\": \"$context.httpMethod\", \"resourcePath\": \"$context.resourcePath\", \"status\": \"$context.status\", \"protocol\": \"$context.protocol\", \"responseLength\": \"$context.responseLength\"}"

  apiCloudWatch:
    Type: "AWS::Logs::LogGroup"
    Properties:
      LogGroupName: !Ref "apiGatewayName"
      RetentionInDays: 7



  # IAM Role
  MyLambdaRole1:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: cloudformation_iam
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action: 's3:*'
                Resource: '*'
              - Effect: Allow
                Action: 'lambda:*'
                Resource: '*'
              - Effect: Allow
                Action: 'apigateway:*'
                Resource: '*'
              - Effect: Allow
                Action: 'rekognition:*'
                Resource: '*'
              - Effect: Allow
                Action: 'lex:*'
                Resource: '*'
              - Effect: Allow
                Action: 'es:*'
                Resource: '*'
  
  # Elasticsearch Domain
  ElasticsearchDomain:
    Type: AWS::Elasticsearch::Domain
    Properties:
      DomainName: 'test'
      ElasticsearchVersion: '7.10'
      ElasticsearchClusterConfig:
        DedicatedMasterEnabled: true
        InstanceCount: '2'
        ZoneAwarenessEnabled: true
        InstanceType: 'm3.medium.elasticsearch'
        DedicatedMasterType: 'm3.medium.elasticsearch'
        DedicatedMasterCount: '3'
      EBSOptions:
        EBSEnabled: true
        Iops: '0'
        VolumeSize: '20'
        VolumeType: 'gp2'
      AccessPolicies:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              AWS: 'arn:aws:iam::831379192233:role/service-role/index-photos-role-pc28xq57'
            Action: 'es:*'
            Resource: 'arn:aws:es:us-east-1:831379192233:domain/test/*'
      AdvancedOptions:
        rest.action.multi.allow_explicit_index: true

Outputs:
  WebsiteURL:
    Description: "URL for Website Hosted on S3"
    Value: 
      Fn::GetAtt: 
        - "S3Bucket"
        - "WebsiteURL"
